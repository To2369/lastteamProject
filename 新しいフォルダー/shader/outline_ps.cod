//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// g_sampler[1]                      sampler      NA          NA             s1      1 
// g_texture[0]                      texture  float4          2d             t0      1 
// g_texture[1]                      texture  float4          2d             t1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
dcl_indexableTemp x0[8], 4
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w; 
//   x0 <- uvOffset
//
#line 13 "C:\Users\2220137\Desktop\git\main\lastteamProject\hlsl\outline_ps.hlsl"
mov r0.xy, v1.xyxx  // r0.x <- uv.x; r0.y <- uv.y

#line 16
mov x0[0].xy, l(0,0.001389,0,0)
mov x0[1].xy, l(0,-0.001389,0,0)
mov x0[2].xy, l(0.000781,0,0,0)
mov x0[3].xy, l(-0.000781,0,0,0)
mov x0[4].xy, l(0.000781,0.001389,0,0)
mov x0[5].xy, l(-0.000781,0.001389,0,0)
mov x0[6].xy, l(0.000781,-0.001389,0,0)
mov x0[7].xy, l(-0.000781,-0.001389,0,0)

#line 28
sample_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t1.yzxw, s1
mov r0.z, r0.z  // r0.z <- depth

#line 30
mov r0.w, l(0)  // r0.w <- depth2

#line 31
mov r1.x, l(0)  // r1.x <- i
mov r1.y, r0.w  // r1.y <- depth2
mov r1.z, r1.x  // r1.z <- i
loop 
  ilt r1.w, r1.z, l(8)
  breakc_z r1.w

#line 33
  mov r2.xy, x0[r1.z + 0].xyxx
  add r2.xy, r0.xyxx, r2.xyxx
  sample_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t1.yzwx, s1
  add r1.y, r1.w, r1.y

#line 34
  iadd r1.z, r1.z, l(1)
endloop 

#line 36
div r0.x, r1.y, l(8.000000)  // r0.x <- depth2

#line 37
mov r0.y, -r0.z
add r0.x, r0.y, r0.x
mov r0.y, -r0.x
max r0.x, r0.y, r0.x
lt r0.x, l(0.001050), r0.x
if_nz r0.x

#line 41
  mov o0.xyzw, l(0,0,0,1.000000)
  ret 

#line 42
endif 

#line 44
sample_indexable(texture2d)(float,float,float,float) o0.xyzw, v1.xyxx, t0.xyzw, s1  // o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
ret 
// Approximately 36 instruction slots used
